name: Build crDroid

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
   
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          bc \
          bison \
          build-essential \
          ccache \
          curl \
          flex \
          g++-multilib \
          gcc-multilib \
          git \
          git-lfs \
          gnupg \
          gperf \
          imagemagick \
          lib32ncurses5-dev \
          lib32readline-dev \
          lib32z1-dev \
          liblz4-tool \
          libncurses5 \
          libncurses5-dev \
          libsdl1.2-dev \
          libssl-dev \
          libwxgtk3.0-gtk3-dev \
          libxml2 \
          libxml2-utils \
          lzop \
          pngcrush \
          rsync \
          schedtool \
          squashfs-tools \
          xsltproc \
          zip \
              zlib1g-dev
    - name: Setup environment
        run: |
          echo "PATH=${HOME}/bin:$PATH" >> $GITHUB_ENV
    - name: Install Repo
      run: |
        # 创建bin目录并添加到PATH
        mkdir -p ~/bin
        echo "::add-path::${HOME}/bin"
        # 下载并设置Repo可执行权限
        curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
        chmod a+x ~/bin/repo

    - name: Initialize Repo and Sync
      run: |
        # 创建crDroid目录并初始化Repo
        mkdir crDroid && cd crDroid
        repo init -u https://github.com/crdroidandroid/android.git -b 14.0 --git-lfs --depth=1
        repo sync -j8

    # 接下来的步骤可以是构建、测试等操作...
# 创建目录，初始化Repo仓库，使用你的fork作为源，指定分支，并进行浅克隆取深度1的同步，使用-j8加快同步速度

    - name: Build ROM
      env:
        DEVICE_CODENAME: alioth
      run: |
        cd crDroid
        . build/envsetup.sh
        brunch $DEVICE_CODENAME
# 设置环境变量指定设备代号，进入crDroid目录，准备环境，然后开始brunch构建指定设备的ROM

    
    # 例如使用actions/upload-artifact上传至GitHub Actions的工作流
    # 或者使用其他云服务提供商的上传方法，如AWS S3，Google Cloud Storage等
